[Task] Підключення

Task 1.
Напишіть код усередині HTML-документа, що виводить на екран ваше ім'я за допомогою alert().

Task 2.Напишіть код у зовнішньому файлі, який виводить на екран ваше ім'я за допомогою alert(). Підключіть створений файл до документа HTML.




[Task] Взаємодія з користувачем

Task №1.
Напишіть код, який запитує ім'я користувача за допомогою prompt() та виводить вітання з його ім'ям на екран за допомогою alert().




[Task] Змінні

Task 1 
1. Оголосіть змінну;
2. Запишіть у змінну будь-яке значення;
3. Виведіть на екран вміст змінної;
4. Змініть значення змінної;
5. Виведіть на екран нове значення змінної.

Task 2
1. Оголосіть дві змінні;
2. Запишіть у змінні будь-які значення;
3. Виведіть на екран значення змінних;
4. Скопіюйте значення однієї змінної до іншої;
5. На екрані виведіть значення змінних.




[Task] Операції зі змінними

Task 1.
Дана сторона квадрата a. Знайдіть його площу S= a * a.

Task 2.
Дано двозначне число. Виведіть на консоль спочатку його ліву цифру (десятки), а потім його праву цифру (одиниці). Для знаходження десятків використовувати операцію поділу націло, для знаходження одиниць – операцію взяття залишку від поділу.

Task 3.
Дано два цілих числа: a, b. Перевірте істинність висловлювання: a > 2 та
 b ≤ 3.

Task 4.
Дано три цілих числа: a, b, c. Перевірте істинність висловлювання:
 a < b < c.

Task 5.
Дано ціле позитивне число. Перевірте істинність висловлювання: це число є непарним тризначним.




[Task] Перетворення типів даних

Допишіть код у файл index.js, щоб у консолі браузера з'явилися рядки, які написані у коментарях.
var x = 1;
var y = 2;
var res1 = ; // Допишіть код, необхідно використовувати змінні x та y
console.log(res1); // "12"
console.log(typeof res1); // "string"

var res2 = ; // Допишіть код, необхідно використовувати змінні x та y
console.log(res2); // "true2"
console.log(typeof res2); // "string"

var res3 = ; // Допишіть код, необхідно використовувати змінні x та y
console.log(res3); // true
console.log(typeof res3); // "boolean"

var res4 = ; // Допишіть код, необхідно використовувати змінні x та y
console.log(res4); // NaN
console.log(typeof res4); // "number"




[Task] Масиви

Task:
1. Створіть порожній масив;
2. До першого елемента масиву запишіть будь-яке число;
3. У другий елемент масиву запишіть будь-який рядок;
4. До третього елементу масиву запишіть будь-яке логічне значення;
5. У четвертому елементі масиву запишіть значення null;
6. Виведіть на екран число елементів, що зберігається у масиві;
7. Запропонуйте користувачу ввести будь-яке значення і запишіть це значення в п'ятий елемент масиву;
8. Виведіть на екран п'ятий елемент масиву.




[Task] Умовні конструкції

Task 1.
Дано ціле число. Якщо воно є додатнім, додайте до нього 1; якщо від’ємним, то відніміть від нього 2; якщо нульовим, замініть його на 10. Виведіть отримане число.

Task 2.
Дано ціле число. Визначте та виведіть його рядок-опис виду:
- "нульове число";
– "додатне парне число";
– "додатне непарне число";
– "від’ємне парне число";
– "від’ємне непарне число".

Task 3.
Дано чотири цілих числа, одне з яких відрізняється від трьох інших, рівних між собою. Визначте порядковий номер числа, відмінного від інших.

Task 4.
Дано ціле число k. Виведіть рядок-опис оцінки, що відповідає числу k (1 – "погано", 2 – "незадовільно", 3 – "задовільно", 4 – "добре", 5 – "відмінно"). Якщо k не лежить у діапазоні 1–5, вивести рядок "помилка".




[Task] Цикли

Task 1. (while)
Є додатні числа a та b (a > b). На відрізку довжини  a  розміщено максимально можливу кількість відрізків довжини b (без накладення). Не користуючись операціями добутку та ділення, знайти довжину вільної частини a.

Task 2. (while)
Задано ціле число n (>0). Використовуя операції ділення і отримання остачі від ділення, виведіть усі його цифри, починаючи з самої правої (розряду одиниць).

Task 3. (for)
Задані два цілих числа a і b (a < b). Знайти суму усіх цілих чисел від a до b включно.

Task 4. (for)
Задано ціле число n (n > 0). Знайти факторіал числа n! (n! = 1 * 2 * … * n).

Task 5.
Напишіте код, який:
1. За допомогою prompt() отримує значення і зберігає їх до масиву.
2. Закінчує введення, як тільки користувач вводить пустий рядок, не число чи нажимає "Скасувати".
3. Виводить суму усіх значень масиву.

Task 6.
Задані цілі числа a і b (a < b). Виведіть усі цілі числа від a до b включно, при цьому a виводится 1 раз, число а+1 - два рази і т.д.




[Task] Функції

Task 1.
Напишіть функцію pow(x, n), яка повертає  x  у ступені  n. Іншими словами, множить x на себе n разів та повертає результат.

Task 2.
Напишіть функцію min(), яка повертає мінімальне число серед усіх переданих аргументів.

Task 3.
Напишіть функцію sign(x), яка повертає для дійсного числа x наступні значення:
– -1, якщо x < 0;
– 0, якщо x = 0;
– 1, якщо x > 0.

Task 4.
Напишіть функцію calc(a, b, op), яка виконує над числами a і b одну із арифметичних операцій та повертає її результат. Вид операції визначається цілим числом op: 1 – віднімання, 2 – добуток, 3 – ділення, інші значення – додавання.

Task 5.
Напишіть функцію digitN(k, n), яка повертає n-у цифру цілого додатнього числа k (цифри у числі нумеруються справа наліво). Якщо кількість цифр в числі k менше n, то функція повертає -1.




[Task] Функціональні вирази

Перепишіть визначення функції add() використовуючи синтаксис Function Expression.


function add(x, y) {
   return x + y;
}




[Task] Замикання

Task 1.
Напишіть код для "безпечного" обчислення периметра та площі прямокутника.
Сторонами прямокутника може лише число (тип даних Number, значення інших типів даних не можна встановлювати), значення якого, суворо більше 0.

Task 2.

У файлі Task2.js допишіть код, щоб функція createArrayIterator() повертала функцію, яка будет перелічувати елементи масиву, який задається через параметр array.

function createArrayIterator(array) {
    // Ваш код
 }
 
 var arr = [5, 3, 7];
 var itr = createArrayIterator(arr);
 console.log(itr()); // 5
 console.log(itr()); // 3
 console.log(itr()); // 7
 console.log(itr()); // undefined

Task 3.

За допомгою коду у файлі Task3.js створюється масив, використовуючи цикл, до масиву записуються три функції. Логіка функцій проста, в консоль виводиться значення лічильника на момент створення функції.
На вигляд код виглядає логічним, але, якщо запустити цей код без змін, в консоль буде виведено двічі число 3.
Використовуючи механізм замикання, внесіть у код зміни, щоб у консоль вивелися число 0 та число 2.

var arr = [];

for (var i = 0; i <= 2; i++) {
   arr[i] = function () {
      console.log(i);
   };
}

arr[0](); // 0
arr[arr.length - 1](); // 2




[Task] Рекурсивні функції

Напишіть рекурсивну функцію digitSum(k), яка знаходить суму цифр цілого числа k  без використання циклів.




[Task] Перевизначення функцій

Допишіть код у файлі Task.js, щоб функція format(data, type) перевизначала себе залежно від параметра type:
Якщо значення параметра type є рядок "number", то перевизначена версія функції format() перетворює значення параметра data в число і повертає результат;
Якщо значення параметра type є рядок "string", то перевизначена версія функції format() перетворює значення параметра data в рядок і повертає результат;
Якщо значення параметра type є рядок "boolean", то перевизначена версія функції format() перетворює значення параметра data в логічне значення і повертає результат;
За інших значень параметра type функція format() не перевизначає себе.

function format(data, type) {
    // Ваш код
}
var originFormat = format;

format("1", "number");
console.log(format()); // 1
console.log(typeof format()); // "number"

originFormat("Hello", "boolean");
console.log(format()); // true
console.log(typeof format()); // "boolean"

originFormat(true, "string");
console.log(format()); // "true"
console.log(typeof format()); // "string"




[Bonus task] Замикання

Створити функцію 

create() , яка приймає один аргумент у вигляді рядка. Ця функція повертає анонімну функцію, яка перевіряє чи переданий в неї аргумент збігається з аргументом зовнішньої функції.

Наприклад: 

 tom = create("pass_for_Tom") 

 tom("pass_for_Tom") повертає true 
 tom("pass_for_tom") 

повертає false




[Bonus task] Замикання 2

Створити функцію create_account(user_name: string, password: string, secret_words: array). Ця функція повинна повертати  функцію check().
Функція  check порівнює значення її аргументів з password та secret_words: password повинен повністю збігатись, secret_words може містити одну неточність (невірне слово).
Пароль має містити не менше 6 символів, включати як мінімум одну велику літеру, одну маленьку, спеціальний символ і цифру.

Приклад 1:
create_account("Tom", "Qwerty1", ["1", "word"]) повертяє null 

Приклад 2:
tom = create_account("Tom", "Qwerty1_", ["1", "word"])   
tom("Qwerty1_",  ["1", "word"]) повертає true 
tom("Qwerty1_",  ["word"]) повертає  false, бо довжини секретных слів різні ["1", "word"] та ["word"]
tom("Qwerty1_",  ["word", "12"]) повертає true
tom("Qwerty1!",  ["word", "1"]) повертає false, бо"Qwerty1!" не дорівнює "Qwerty1_"




[Task] Об'єкти

Завдання №1.
  
1. Створіть новий об'єкт користувача;  
2. Додайте властивість name із значенням Cris;  
3. Додайте властивість surname зі значенням Simons;  
4. Змініть значення name на Brain;  
5. Видаліть властивість name з об'єкта;  

Завдання №2.  

1. Створіть новий об'єкт car;  
2. Додайте властивість model з будь-яким значенням;  
3. Додайте властивість speed з будь-яким значенням;  
4. Додати метод run(), який виводить повідомлення: "model їде зі швидкістю  speed";  
5. Додайте метод stop(), який виводить повідомлення: "model зупинилася";  Реалізуйте 3 версії завдання, використовуючи наступні синтаксиси створення  об'єктів:  
1. Стандартний;  
2. Масивів;  
3. Спрощений. 
 
Завдання №3.  

1. Створіть новий об'єкт tv;  
2. Додайте властивість currentChannel зі значенням 1;  
3. Додайте метод nextChannel(), який збільшує currentChannel на одиницю;  4. Додайте метод previousChannel(), який зменшує поточний Channel на  одиницю;  
5. Додати метод setChannel(number), який переходить на канал за номером. 
 
Завдання №4.  

Створити об'єкт, який описує MP3 плеєр.  
Завдання №5. Вкладені. Масиви в об'єктах  
Опишіть таку інформацію у вигляді ієрархії масивів та об'єктів:  
Name Age Experience Languages  
John 28 1 Java, JavaScript, SQL 
Bill 30 5 HTML, CSS, JavaScript 
Mike 32 4 Python, SQL

Завдання №6. 

Перевірка наявності властивостей та методів. Перебір  властивостей та методів  
Створіть функцію isEmpty(obj), яка повертає true, якщо в об'єкті немає властивостей  та false – якщо хоч одна властивість є.  
 
Завдання №7. 

Перебір властивостей та методів  
Є об'єкт salaries з зарплатами. Напишіть код, який виведе середнє значення всіх  зарплат. Код має працювати з різною кількістю зарплат в об'єкті.  
Приклади salaries:  
var salaries = {  
 John: 100,  
 Bill: 300,  
 Mike: 250  
};  
var salaries = {  
 Cris: 150,  
 Brain: 600,  
 John: 300,  
 Steve: 400,  
 Bill: 50  
}; 




[Task] Ключове слово this

Створіть об'єкт calculator, який буде мати методи:

1. read() запитує два значення з допомогою prompt() і зберігає в властивостях об'єкта;
2. sum() повертає суму цих двох значень;
3. mul() повертає добуток цих двох значень.

var calculator = {
   // Ваш код
};
calculator.read();
console.log(calculator.sum());
console.log(calculator.mul());




[Task] Об'єкти у функціях

Task 1.
Напишіть функцію створення об'єктів, які описують MP3 плеєр.

Task 2.
Напишіть функцію, яка приймає як параметр об'єкт salaries із зарплатами та повертає значення максимальної із зарплат.
Код має працювати з різною кількістю зарплат в об'єкті.
Приклади salaries у файлі task2.js

var salaries = {
    John: 100,
    Bill: 300,
    Mike: 250,
};

var salaries = {
    Cris: 150,
    Brain: 600,
    John: 300,
    Steve: 400,
    Bill: 50,
};




[Task] Конструктори об'єктів

Створіть тип об'єктів MP3-плеєрів за допомогою конструкторів об'єктів.




[Task] Функція як об'єкт

Task 1.
Напишіть функцію mul(), яка приймає будь-яку кількість параметрів різного типу та повертає добуток параметрів типу Number.
Якщо параметри Number відсутні, повертає число 0.

function mul() {
   // Ваш код
}
console.log(mul(1, "str", 2, 3, true)); // 6
console.log(mul(null, "str", false, true)); // 0

Task 2. 
Явне задання this
Допишіть код (файл task2.js), щоб у консолі браузера з'явилися рядки, які написані у коментарях.

var country = {
    name: "Ukraine",
    language: "ukrainian",
    capital: {
        name: "Kyiv",
        population: 2907817,
        area: 847.66,
    },
};
function format(beginMsg, endMsg) {
    console.log(beginMsg + this.name + endMsg);
}
format.call(/* Ваш код */); // "<Ukraine>"
format.apply(/* Ваш код */); // "[Ukraine]"
format.call(/* Ваш код */); // ""Kyiv""
format.apply(/* Ваш код */); // "Kyiv"




[Task] Інкапсуляція

Task 1
Створіть тип об'єктів Аудіоплеєр, в якому є приватна властивість гучність звуку, для доступу до цієї властивості реалізуйте:
1. Методи геттер та сеттер;
2. Єдиний метод геттер-сетер.
Гучність може бути в діапазоні від 0 до 100.

Task  2
Створіть тип об'єктів Суматор, з наступним функціоналом:
1. Приватна властивість __firstNumber;
2. Приватна властивість __secondNumber;
3. Публічна властивість  result;
4. Приватний метод __calc(), який записує в result суму властивостей __firstNumber та __secondNumber;
5. Єдині методи геттер-сеттер для властивостей __firstNumber і __secondNumber, під час роботи методів у якості сеттерів, повинна відбуватися валідація (встановлювати можна лише значення типу Number), якщо валідація відбулась успішно, повинен викликатись метод __calc(). Виходить, що при успішній установці чи __firstNumber чи __secondNumber, відбувається перерахунок result.




[Task] Прив'язка контексту

Task 1.
Дано наступний код (файл task1.js):
Прив'яжіть функцію format() до об'єкта user.
Реалізуйте 2 версії поточного завдання за допомогою:
1. Анонімну функцію обгортку;
2. Метод bind().

var user = {
    name: "Tom",
};
function format(beginMsg, endMsg) {
    console.log(beginMsg + this.name + endMsg);
}
var tomFormat = // Ваш код
tomFormat("<<<", ">>>"); // "<<<Tom>>>"

Task 2.
Дано наступний  код (файл task2.js):
Використовуючи функцію mul() і каринг створіть дві функції doubleMul() і qadraMul(), які множать числа на 2 і 4 відповідно.

function mul(a, b) {
    return a * b;
}

var doubleMul = // Ваш код
var qudraMul = // Ваш код
console.log(doubleMul(5)); // 10
console.log(qudraMul(5)); // 20

Task 3.
Використовуючи код із файлу (файл task3.js) Напишіть аналог методу bind().

function bind(func, context) {
    // Ваш код
}
function func() {
    console.log(this.name + " - " + this.age);
}
var user = {
    name: "Tom",
    age: 20,
};
var f = bind(func, user);
f(); // "Tom – 20"




[Task] Типи об'єктів на прототипах

Створіть тип об'єктів MP3 плеєра за допомогою прототипів.




[Task] Прототипне успадкування

Task 1.
Створіть тип об'єктів Геометрична фігура, визначте в ньому приватні властивості для встановлення центру фігури. Для доступу до цих властивостей визначте необхідний метод/методи.
На основі цього типу створіть два нових типи (спадкоємці) - Прямокутник і Коло. У цих типах визначте особливі приватні характеристики. (Наприклад, довжина діагоналі для Прямокутника та радіус для Круга). До кожного з типів додайте публічний метод info(), який виводить на екран всю доступну інформацію про фігуру.


Task 2.
Поліморфізм
Створіть тип об'єктів Квадрат, визначте захищену властивість для збереження значення сторони. Для доступу до цієї властивості визначте необхідний метод/методи. Визначте також публічний метод, який повертає периметр.
На основі цього типу створіть тип Куб та перевизначте метод отримання периметра.
Реалізуйте 2 версії поточного завдання, використовуючи такі способи перевизначення:
1. Без розширення (повністю перевизначити метод батьківського типу);
2. З розширенням (використовувати результат методу батьківського типу для подальших розрахунків).




[Task] Object

Створіть тип об'єктів Прямокутник із властивостями координат верхнього лівого (x1, y1) та нижнього правого (x2, y2) вершин.
Перевизначте методи toString() та valueOf(). Метод toString() повинен повертати рядок із описом поточного стану. Метод valueOf() повинен повертати поточний периметр.




[Task] String

Task1.
Дано рядок, який містить імена користувачів, розділені комою - "Login1, LOgin2, login3, loGin4". Розбийте цей рядок на масив рядків (щоб окремо були логіни), і переведіть їх у нижній регістр.

Task2.
Напишіть програму, яка запитує у користувача рядка (prompt()). Введення рядків має бути завершено, коли користувач вводить рядок end. Далі програма перевіряє, чи є у рядку цифри, якщо так, додає на початок рядка текст "Numbers: ", якщо ні – "No numbers:" і виводить результат у вигляді наступної таблиці:
+-----------------+---------------------+
|      Input      |       output      |
+-----------------+---------------------+
|      Input1    |      output1    |
+-----------------+---------------------+
|      Input2    |      output2     |
+-----------------+---------------------+




[Task] Date

Напишіть функцію addTwoDays(date), яка приймає об'єкт типу Date та додає до дати даного об'єкта два дні.




[Task] Array

Task1
1.Створіть масив з елементами " JavaScript", "Python";
2. Додайте в кінець елемент "Java";
3. Заміните передостанній елемент з кінця на
"Kotlin". Код заміни повинен бути універсальним, тобто працювати для
масивів будь-якої довжини;
4. Видаліть перший елемент масиву и виведить його у
консоль;
5. Додайте в початок елементи "Basic" і "Pascal".
Масив в результаті кожного кроку:
1. ["JavaScript", "Python"]
2. ["JavaScript", "Python ", "Java"]
3. ["JavaScript ", "Kotlin", "Java"]
4. ["Kotlin", "Java"]
5. ["Basic", "Pascal", "Kotlin", "Java"]

Task2

Розширте тип об'єктів Array методом sortDesc(), який сортує масив за спаданням.

// Ваш код
var arr = [5, 1, 4, 2, 3];
arr.sortDesc();
console.log(arr); // [5, 4, 3, 2, 1]

Task3

Напишіть функцію deleteEvenNumbers(array), яка приймає масив array, видаляє з масиву array парні числа та повертає його.

function deleteEvenNumbers(array) {
   // Ваш код
}
var arr = [1, 2, 3, 4, 5];
var arr = deleteEvenNumbers(arr);
console.log(arr); // [1, 3, 5]

Task4

Є наступний код
var arr = ["Tom", "Sam", "Bob"];
var arrLength = [];
for (var i = 0; i < arr.length; i++) {
   arrLength[i] = "<li>" + arr[i] + "</li>";
}
console.log(arrLength); // ["<li>Tom</li>", "<li>Sam</li>", "<li>Bob</li>"]

Перепишіть код, замінивши цикл for на метод map().

Task5

Напишіть функцію matrixToArray(matrix), яка приймає двовимірний масив (матрицю) matrix, розгортає двовимірний масив у одновимірний та повертає його. Це завдання необхідно вирішити за допомогою акумулюючих методів.

function matrixToArray(matrix) {
   // Ваш код
}
var arr = [[1, 2], [3, 4, 5], [6, 7, 8], [9]];
var arr = matrixToArray(arr);
console.log(arr); // [1, 2, 3, 4, 5, 6, 7, 8, 9]




[Task] Модулі

Напишіть код для "безпечного" обчислення периметра та площі прямокутника у вигляді модуля.
Сторонами прямокутника може бути лише число (тип даних Number, значення інших типів даних не можна встановлювати), значення якого, суворо більше 0.




[Task] Винятки

Task 1.
Напишіть функцію sumSliceArray(arr, first, second), яка приймає масив arr і два числа (first и second) – порядкові номери елементів масиву, які необхідно скласти. Наприклад, якщо ввели 3 та 5 – сумуються 3-й та 5-й елементи.Функція повинна генерувати винятки, якщо були введені не числа, і коли одне з чисел або обидва більшого розміруза довжину масиву. Напишіть код, який використовує цю функцію, передбачте обробку можливих винятків.


Task 2.
Візьміть функцію sumSliceArray(arr, first, second) з попереднього завдання та напишіть код, який її використовує, але перед використанням перевіряє всі параметри на правильність. Таким чином, ніколи не повинні генеруватися винятки, які є всередині цієї функції.




[Task] Асинхронне програмування

Напишіть функцію random(min, max, delay, callback), яка через delay мілісекунд передає callback до черги на виконання.

Якщо min менше за max, функція генерує випадкове число в діапазоні від min до max і передає в callback другим параметром.
Якщо min більше за max, функція створює об'єкт помилки та передає в callback першим параметром.
Для генерації випадкових чисел можна використати метод Math.random().
Приклади використання функції:

function random(min, max, delay, callback) {
   // Ваш код
}
random(1, 100, 2000, function (error, data) {
   // Ваш код
});
random(1000, 100, 3000, function (error, data) {
   // Ваш код
});

Через дві секунди, у консолі повинно з'явитись випадкове число от 1 до 100.
Через три секунди, 

у консолі повинно з’явитись інформація про помилку.




Самостійна робота "Розумний будинок"

1. Розробити архітектуру програмного забезпечення, що реалізує моделювання системи управління компонентами "розумного будинку".
2. Функціональні вимоги до системи моделювання компонентів "розумного будинку  ":
- у системі має бути змодельовано не менше 3 типів компонент "розумного будинку", наприклад: світильник, обігрів, жалюзі, сигналізація та ін;
3. Розробити програму, яка моделює роботу системи управління компонентами "розумного дому".
4. Не функціональні вимоги до програми:
– мати діаграму класів для компонент, що розробляються, код повинен відповідати заявленій структурі;
– під час розробки програми має використовуватися об'єктно-орієнтований підхід із підтримкою всіх можливостей ООП (інкапсуляція, наслідування, поліморфізм).
5. Система моделювання (управління) розумним будинком у складі щонайменше 3 типів компонентів (як зазначено у функціональних вимогах) повинна включати 1 обов'язковий компонент з розширеними можливостями управління. Наприклад, телевізор, програмна модель якого включає всі можливі стани сутності "телевізор" та можливості з керування ним, наприклад: увімкнення/вимкнення, отримання списку каналів, перемикання каналів, пошук каналів, налаштування телевізора і т.д.
6. Додаткове завдання - реалізувати асинхроний метод.

1. Обрити перший пристрій
   Лампа
2. "Креслення" першого пристрою
   клас Lamp
      стан
         _name : String
         _state : Boolean
         _brightness : Number (0 - 10)
      поведінка
         getName() : String
         getState() : Boolean
         on() : void
         off() : void
         getBrightness() : Number
         increseBrightness() : void
         decreaseBrightness() : void
         _isNumber(Number) : Boolean
3. Набір коду для пешого пристрою (прототипне ООП)
4. Обрати другий пристрій
5. "Креслення" другого пристрою
6. Набір коду другого пристрою (прототипне ООП)
7. Загальний код двох пристроїв винести в батьківський клас (наслідування)
8. "Креслення" класа Будинок
   клас SmartHouse
      стан
         _name: String
         _devices: [Object]
      поведінка
         getName(): String
         addDevice(device): void
         getDevices(): [Object]
         getDeviceByName(name): Object
         deleteDeviceByName(name): void
         offAllDevice(): void
         delayedOff1(name: String, delay: Number, callback: Function): void
         delayedOff2(name: String, delay: Number): Promise
9. Набір коду для класу SmartHouse

Приклад роботи:
var sh = new SmartHouse("Name1");
sh.addDevice(new Lamp("Lamp1"));
sh.addDevice(new Lamp("Lamp2"));
console.log(sh.getDevices());
console.log(sh.getDeviceByName("Lamp2"));
sh.getDeviceByName("Lamp2").on();
sh.offAllDevice();